#include "common_includes.h"
#include "I2C_core.h"
#include "mipi_camera_config.h"
#include "mipi_bridge_config.h"
#include "ddr3_circular_buf.h"
#include "ocm_dma_buf.h"

#include "auto_focus.h"
#include "altera_avalon_fifo_util.h"
#include "sys/alt_irq.h"

#define DEFAULT_LEVEL 			0x02

#define STATUS_BIT_DONE 		0x01
#define STATUS_BIT_FAIL 		0x02
#define STATUS_BIT_SUCCESS 		0x04

#define STATUS_ERR_CAM			0x01
#define STATUS_ERR_DDR3			0x02
#define STATUS_ERR_DMA			0x04
#define STATUS_ERR_DROP			0x08

// MIPI REG
#define MIPI_REG_PHYClkCtl		0x0056
#define MIPI_REG_PHYData0Ctl	0x0058
#define MIPI_REG_PHYData1Ctl	0x005A
#define MIPI_REG_PHYData2Ctl	0x005C
#define MIPI_REG_PHYData3Ctl	0x005E
#define MIPI_REG_PHYTimDly		0x0060
#define MIPI_REG_PHYSta			0x0062
#define MIPI_REG_CSIStatus		0x0064
#define MIPI_REG_CSIErrEn		0x0066
#define MIPI_REG_MDLSynErr		0x0068
#define MIPI_REG_FrmErrCnt		0x0080
#define MIPI_REG_MDLErrCnt		0x0090

// TODO: check almostfull threshold to eliminate the number of fifo interrupt
#define ALMOSTFULL_THRESHOLD	0x0064
#define ALMOSTEMPT_THRESHOLD	0x0001
#define FIFO_CSR_IE				0x0005
// CAM STSP
#define CAM_START_STREAMING		0x01
#define CAM_STOP_STREAMING 		0x00
#define CAM_STARTSTOP_MASK		0x08

// Frame size
#define FRAME_SIZE_H			640
#define FRAME_SIZE_V			480

// global variables definition
bool bShowMessage = TRUE;
alt_u8 gDDR3_status;
alt_u8 gSys_status = 0x0;
const alt_u8 KeyMask = 0x0F; // 4 button
alt_u16  cam_current_focus;

int fifo_fill_level;
int fifo_data;
volatile int fifo_irq_event;

alt_u8 iframe_cnt;
alt_u8 ipackage_cnt;
int ipackage_size;

#define START_FRAME_STATE		0x1
#define CONTENT_FRAME_STATE		0x2
#define END_FRAME_STATE			0x3

int FSM_statemachine;
int pixel_cnt;
int line_cnt;

alt_u16 sframe_size_h, sframe_size_v;

alt_u32 uiCam_DMA_address_l, uiCam_DMA_address_h;
alt_u32 uiCam_DMA_size;
alt_u16 uiCam_DMA_status;
alt_u32 uiCam_Debug;
alt_u8  uiAuto_focus;
alt_u8 	uiCam_streaming;	// 1: start, 0: stop

DDR3_CIRC_BBUF_DEF(mipicambuf, DDR3_MAX_LENGTH);
DMA_OCM_BUF_DEF(dmaocmbuf, OCM_MAX_LENGTH, DMA_REGION_NUM);
DMA_OCM_REG_DEF(dmaocmreg, DMA_REGION_NUM);

alt_u8 ocm_writting_fsm;

// global flags definition
#define MIPI_SHOW_ERROR

// frame header, footer definition
#define FRAME_HEADER			0x1EADCAFE
#define CONTENT_HEADER			0x55555555
#define FRAME_FOOTER			0xDEADCAFE

void mipi_clear_error(void){
	MipiBridgeRegWrite(MIPI_REG_CSIStatus, 0x01FF); // clear error
	MipiBridgeRegWrite(MIPI_REG_MDLSynErr, 0x0000); // clear error
	MipiBridgeRegWrite(MIPI_REG_FrmErrCnt, 0x0000); // clear error
	MipiBridgeRegWrite(MIPI_REG_MDLErrCnt, 0x0000); // clear error

  	MipiBridgeRegWrite(0x0082, 0x00);
  	MipiBridgeRegWrite(0x0084, 0x00);
  	MipiBridgeRegWrite(0x0086, 0x00);
  	MipiBridgeRegWrite(0x0088, 0x00);
  	MipiBridgeRegWrite(0x008A, 0x00);
  	MipiBridgeRegWrite(0x008C, 0x00);
  	MipiBridgeRegWrite(0x008E, 0x00);
  	MipiBridgeRegWrite(0x0090, 0x00);
}

void mipi_show_error_info(void){
	alt_u16 PHY_status, SCI_status, MDLSynErr, FrmErrCnt, MDLErrCnt;

	PHY_status 	= MipiBridgeRegRead(MIPI_REG_PHYSta);
	SCI_status 	= MipiBridgeRegRead(MIPI_REG_CSIStatus);
	MDLSynErr 	= MipiBridgeRegRead(MIPI_REG_MDLSynErr);
	FrmErrCnt 	= MipiBridgeRegRead(MIPI_REG_FrmErrCnt);
	MDLErrCnt 	= MipiBridgeRegRead(MIPI_REG_MDLErrCnt);
	printf("PHY_status=%xh, CSI_status=%xh, MDLSynErr=%xh, FrmErrCnt=%xh, MDLErrCnt=%xh\r\n", PHY_status, SCI_status, MDLSynErr,FrmErrCnt, MDLErrCnt);
}

void mipi_show_error_info_more(void){
    printf("FrmErrCnt = %d\n", MipiBridgeRegRead(0x0080));
    printf("CRCErrCnt = %d\n", MipiBridgeRegRead(0x0082));
    printf("CorErrCnt = %d\n", MipiBridgeRegRead(0x0084));
    printf("HdrErrCnt = %d\n", MipiBridgeRegRead(0x0086));
    printf("EIDErrCnt = %d\n", MipiBridgeRegRead(0x0088));
    printf("CtlErrCnt = %d\n", MipiBridgeRegRead(0x008A));
    printf("SoTErrCnt = %d\n", MipiBridgeRegRead(0x008C));
    printf("SynErrCnt = %d\n", MipiBridgeRegRead(0x008E));
    printf("MDLErrCnt = %d\n", MipiBridgeRegRead(0x0090));
    printf("FIFOSTATUS = %d\n", MipiBridgeRegRead(0x00F8));
    printf("DataType = 0x%04x\n", MipiBridgeRegRead(0x006A));
    printf("CSIPktLen = %d\n", MipiBridgeRegRead(0x006E));
}

bool MIPI_Init(void){
	bool bSuccess;
	bSuccess = oc_i2c_init_ex(I2C_OPENCORES_MIPI_BASE, 125*1000*1000, 400*1000); //I2C: 400K
	if (!bSuccess){
		printf("failed to initialize MIPI-Bridge i2c\r\n");
	}
	else {
		usleep(50*1000);
		MipiBridgeInit();
	}

    usleep(500*1000);
    bSuccess = MipiCameraInit();
	if (!bSuccess){
		printf("failed to MipiCameraInit\r\n");
	}
	else {
		usleep(1000);
		MIPI_BIN_LEVEL(DEFAULT_LEVEL);
	}

	return bSuccess;
}

// interrupt service routine for fifo
static void fifo_irq(void* context, alt_u32 id){
	// read data and write to DDR3 until FIFO empty
	FIFO_read();
	// TODO :clear interrupt flag
	//
}

int main()
{
	// ------------ Camera System Initialization ------------ //
	printf("Welcome to MIPI Camera Application!!!\n");
	// mipi camera power up and reset
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0x00);
	IOWR(MIPI_RESET_N_BASE, 0x00, 0x00);
	usleep(2000);
	IOWR(MIPI_PWDN_N_BASE, 0x00, 0xFF);
	usleep(2000);
	IOWR(MIPI_RESET_N_BASE, 0x00, 0xFF);

	// ddr3 status check
	gDDR3_status = IORD(DDR3_STATUS_BASE, 0x00);
	if ((gDDR3_status & STATUS_BIT_DONE) != STATUS_BIT_DONE){
		printf("local init done: fail (Status=%xh)\r\n", gDDR3_status);
		gSys_status |= STATUS_ERR_DDR3;
	}
	else if (((gSys_status & STATUS_BIT_FAIL) == STATUS_BIT_FAIL) || ((gSys_status & STATUS_BIT_SUCCESS) != STATUS_BIT_SUCCESS)){
	    printf("DDR3 calibration: fail\r\n");
	    gSys_status |= STATUS_ERR_DDR3;
	}

	// MIPI Initialization
	if (!MIPI_Init()){
		printf("MIPI_Camera Initialization failed!\r\n");
		gSys_status |= STATUS_ERR_CAM;
	}
	else{// if no initialization error, then clear error and show info
		mipi_clear_error();
		usleep(50*1000);
		mipi_clear_error();
		usleep(1000*1000);
#ifdef MIPI_SHOW_ERROR
		mipi_show_error_info();
		mipi_show_error_info_more();
#endif
	}

	// camera auto-focus
	Focus_Init();
	// trigger auto-focus after initialization
	cam_current_focus = Focus_Window(320,240);

	// Stop camera streaming
	uiCam_streaming = CAM_STOP_STREAMING;
	OV8865_StartStop_Streaming(uiCam_streaming);

	// fifo initialization: interrupt at almostfull and full, almostempty = almostfull = 1
	// Disable FIFO interrupt
	altera_avalon_fifo_init(FIFO_0_IN_CSR_BASE, 0x0/*Disabled interrupts*/, ALMOSTEMPT_THRESHOLD, ALMOSTFULL_THRESHOLD);

	do{
		// clean up fifo data
		fifo_fill_level = altera_avalon_read_fifo(FIFO_0_OUT_BASE, FIFO_0_IN_CSR_BASE, &fifo_data);
	}
	while(fifo_fill_level);

	// Enable FIFO interrupt
	altera_avalon_fifo_init(FIFO_0_IN_CSR_BASE, FIFO_CSR_IE, ALMOSTEMPT_THRESHOLD, ALMOSTFULL_THRESHOLD);
	void* fifo_irq_event_ptr = &fifo_irq_event;

	// Register FIFO interrupt handler
	alt_irq_handler(FIFO_0_IN_CSR_IRQ, fifo_irq_event_ptr, fifo_irq);

	// clear global variables
	// read data from FIFO, then write to DDR3
	FSM_statemachine 	= START_FRAME_STATE;
	pixel_cnt 			= 0;
	line_cnt 			= 0;
	iframe_cnt 			= 0;
	ipackage_cnt 		= 0;
	ipackage_size 		= 0;
	ocm_writting_fsm	= HEADER_ID_STATE;
	dma_buf_region_idx  = 0;

	// TODO: read csr register and implement camera read/write strategy
	do { // infinity loop
		if(uiCam_streaming){
			// read DDR3 data and write to OCM DMA
			OCM_write();
			// set-up the DMA status
			DMA_controller();
			// check if Cam streaming bit to stop
			if(IORD(CSR_REGMAP_BASE, 0x1) && CAM_STARTSTOP_MASK){
				uiCam_streaming = CAM_STOP_STREAMING;
				OV8865_StartStop_Streaming(uiCam_streaming);
			}
		}else { // Cam streaming stopped
			// check if Cam streaming bit to start
			if(IORD(CSR_REGMAP_BASE, 0x1) && CAM_STARTSTOP_MASK){
				uiCam_streaming = CAM_START_STREAMING;
				OV8865_StartStop_Streaming(uiCam_streaming);
			}
		}
	}while (1);

    return 0;
}

// read FIFO data and write to DDR3 until FIFO empty
// pixel code: 4 bytes = 0x11 && RGB 24bits pixel --> Start Frame pixel
//						 0x55 && RGB 24bits pixel --> Content pixel
//						 0xAA && RGB 24bits pixel --> End Frame pixel
#define SF_PIXEL 		0x11000000
#define CF_PIXEL		0x55000000
#define EF_PIXEL 		0xAA000000


void FIFO_read(void){
	alt_u32 read_data;
	int ddr3_write_status;

	do{
		// check if DDR3 is not full to write
		if (circ_bbuf_is_full()) break;
		// read FIFO data out, then write to DDR3
		fifo_fill_level = altera_avalon_read_fifo(FIFO_0_OUT_BASE, FIFO_0_IN_CSR_BASE, &fifo_data);
		// FSM_statemachine = 0, then read FIFO data and throw way
		switch (FSM_statemachine){
			case START_FRAME_STATE:
				read_data = ((alt_u32)fifo_data | SF_PIXEL);
				FSM_statemachine = CONTENT_FRAME_STATE;
				break;
			case CONTENT_FRAME_STATE:
				read_data = ((alt_u32)fifo_data | CF_PIXEL);
				if ((line_cnt == FRAME_SIZE_V-1)&&(pixel_cnt == FRAME_SIZE_H-2)) FSM_statemachine = END_FRAME_STATE;
				break;
			case END_FRAME_STATE:
				read_data = ((alt_u32)fifo_data | EF_PIXEL);
				FSM_statemachine = START_FRAME_STATE;
				break;
			default: break;
		}
		// counting pixel
		pixel_cnt++;
		if (pixel_cnt == FRAME_SIZE_H) {
			pixel_cnt = 0;
			line_cnt++;
			if(line_cnt == FRAME_SIZE_V) {
				line_cnt = 0;
			}
		}
		// write data to DDR3
		ddr3_write_status = circ_bbuf_push(&mipicambuf, read_data);
		if (ddr3_write_status == -1) break;
	}
	while(fifo_fill_level);	// read until FIFO empty
}

void OCM_write(void){
	// TODO: 1. read DDR3 circular buffer, read data out if not is_empty, 2. write data to OCM
	alt_u32 ddr3_data;
	alt_u32 header_data;

	// check if there is an available in the current region
	do {
		// check if ocm available
		if(dma_ocm_is_full(&dmaocmbuf[dmaocmreg->head])){
			if(dma_ocm_reg_is_full(&dmaocmreg)){
				//memory + memory region full
				break;
			}
			else {
				dma_ocm_reg_switch(&dmaocmreg);
			}
		}
		// check if DDR3 available to read
		if(!circ_bbuf_is_empty(&mipicambuf)){
			// read DDR3 data, then write to OCM
			circ_bbuf_pop(&mipicambuf, &ddr3_data);
			switch(ocm_writting_fsm){
				case HEADER_ID_STATE:
					header_data = FRAME_HEADER;
					break;
				case HEADER_PACK_STATE:
					break;
				case CONTENT_ID_STATE:
					break;
				case CONTENT_PACK_STATE:
					break;
				case FOOTER_ID_STATE:
					break;
				case FOOTER_PACK_STATE:
					break;
				default: break;
			}
		}
		else {
			break;
		}
	}while(1);
}

void DMA_controller(void){
	// TODO: 1. check OCM status, then update DMA CSR register

}
