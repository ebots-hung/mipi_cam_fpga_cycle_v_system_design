// top_mm_interconnect_5.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module top_mm_interconnect_5 (
		input  wire        clk_0_clk_clk,                                                        //                                                      clk_0_clk.clk
		input  wire        pcie_256_dma_coreclkout_clk,                                          //                                        pcie_256_dma_coreclkout.clk
		input  wire        alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset,       //       alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset.reset
		input  wire        pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset, // pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset.reset
		input  wire [6:0]  pcie_reconfig_driver_0_reconfig_mgmt_address,                         //                           pcie_reconfig_driver_0_reconfig_mgmt.address
		output wire        pcie_reconfig_driver_0_reconfig_mgmt_waitrequest,                     //                                                               .waitrequest
		input  wire        pcie_reconfig_driver_0_reconfig_mgmt_read,                            //                                                               .read
		output wire [31:0] pcie_reconfig_driver_0_reconfig_mgmt_readdata,                        //                                                               .readdata
		input  wire        pcie_reconfig_driver_0_reconfig_mgmt_write,                           //                                                               .write
		input  wire [31:0] pcie_reconfig_driver_0_reconfig_mgmt_writedata,                       //                                                               .writedata
		output wire [6:0]  alt_xcvr_reconfig_0_reconfig_mgmt_address,                            //                              alt_xcvr_reconfig_0_reconfig_mgmt.address
		output wire        alt_xcvr_reconfig_0_reconfig_mgmt_write,                              //                                                               .write
		output wire        alt_xcvr_reconfig_0_reconfig_mgmt_read,                               //                                                               .read
		input  wire [31:0] alt_xcvr_reconfig_0_reconfig_mgmt_readdata,                           //                                                               .readdata
		output wire [31:0] alt_xcvr_reconfig_0_reconfig_mgmt_writedata,                          //                                                               .writedata
		input  wire        alt_xcvr_reconfig_0_reconfig_mgmt_waitrequest                         //                                                               .waitrequest
	);

	wire         pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_waitrequest;   // pcie_reconfig_driver_0_reconfig_mgmt_agent:av_waitrequest -> pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_waitrequest
	wire  [31:0] pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_readdata;      // pcie_reconfig_driver_0_reconfig_mgmt_agent:av_readdata -> pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_readdata
	wire         pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_debugaccess;   // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_debugaccess -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_debugaccess
	wire   [8:0] pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_address;       // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_address -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_address
	wire         pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_read;          // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_read -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_read
	wire   [3:0] pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_byteenable;    // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_byteenable -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_byteenable
	wire         pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_readdatavalid; // pcie_reconfig_driver_0_reconfig_mgmt_agent:av_readdatavalid -> pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_readdatavalid
	wire         pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_lock;          // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_lock -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_lock
	wire         pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_write;         // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_write -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_write
	wire  [31:0] pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_writedata;     // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_writedata -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_writedata
	wire   [2:0] pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_burstcount;    // pcie_reconfig_driver_0_reconfig_mgmt_translator:uav_burstcount -> pcie_reconfig_driver_0_reconfig_mgmt_agent:av_burstcount
	wire         rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> pcie_reconfig_driver_0_reconfig_mgmt_agent:rp_valid
	wire  [78:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> pcie_reconfig_driver_0_reconfig_mgmt_agent:rp_data
	wire         rsp_mux_src_ready;                                                                       // pcie_reconfig_driver_0_reconfig_mgmt_agent:rp_ready -> rsp_mux:src_ready
	wire   [0:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> pcie_reconfig_driver_0_reconfig_mgmt_agent:rp_channel
	wire         rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> pcie_reconfig_driver_0_reconfig_mgmt_agent:rp_startofpacket
	wire         rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> pcie_reconfig_driver_0_reconfig_mgmt_agent:rp_endofpacket
	wire  [31:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_readdata;                                     // alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_readdata -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_readdata
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_waitrequest;                                  // alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_waitrequest -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_waitrequest
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_debugaccess;                                  // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_debugaccess -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_debugaccess
	wire   [8:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_address;                                      // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_address -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_address
	wire   [3:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_byteenable;                                   // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_byteenable -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_byteenable
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_read;                                         // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_read -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_read
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_readdatavalid;                                // alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_readdatavalid -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_readdatavalid
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_lock;                                         // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_lock -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_lock
	wire  [31:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_writedata;                                    // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_writedata -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_writedata
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_write;                                        // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_write -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_write
	wire   [2:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_burstcount;                                   // alt_xcvr_reconfig_0_reconfig_mgmt_agent:m0_burstcount -> alt_xcvr_reconfig_0_reconfig_mgmt_translator:uav_burstcount
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_valid;                                 // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_source_valid -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:in_valid
	wire  [79:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_data;                                  // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_source_data -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:in_data
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_ready;                                 // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:in_ready -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_source_ready
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_startofpacket;                         // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_source_startofpacket -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:in_startofpacket
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_endofpacket;                           // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_source_endofpacket -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:in_endofpacket
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_valid;                              // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:out_valid -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_sink_valid
	wire  [79:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_data;                               // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:out_data -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_sink_data
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_ready;                              // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_sink_ready -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:out_ready
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_startofpacket;                      // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:out_startofpacket -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_sink_startofpacket
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_endofpacket;                        // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo:out_endofpacket -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rf_sink_endofpacket
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_valid;                            // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rdata_fifo_src_valid -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo:in_valid
	wire  [33:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_data;                             // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rdata_fifo_src_data -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo:in_data
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_ready;                            // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo:in_ready -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rdata_fifo_src_ready
	wire         pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_valid;                                     // pcie_reconfig_driver_0_reconfig_mgmt_agent:cp_valid -> router:sink_valid
	wire  [78:0] pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_data;                                      // pcie_reconfig_driver_0_reconfig_mgmt_agent:cp_data -> router:sink_data
	wire         pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_ready;                                     // router:sink_ready -> pcie_reconfig_driver_0_reconfig_mgmt_agent:cp_ready
	wire         pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_startofpacket;                             // pcie_reconfig_driver_0_reconfig_mgmt_agent:cp_startofpacket -> router:sink_startofpacket
	wire         pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_endofpacket;                               // pcie_reconfig_driver_0_reconfig_mgmt_agent:cp_endofpacket -> router:sink_endofpacket
	wire         router_src_valid;                                                                        // router:src_valid -> cmd_demux:sink_valid
	wire  [78:0] router_src_data;                                                                         // router:src_data -> cmd_demux:sink_data
	wire         router_src_ready;                                                                        // cmd_demux:sink_ready -> router:src_ready
	wire   [0:0] router_src_channel;                                                                      // router:src_channel -> cmd_demux:sink_channel
	wire         router_src_startofpacket;                                                                // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire         router_src_endofpacket;                                                                  // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire         router_001_src_valid;                                                                    // router_001:src_valid -> rsp_demux:sink_valid
	wire  [78:0] router_001_src_data;                                                                     // router_001:src_data -> rsp_demux:sink_data
	wire         router_001_src_ready;                                                                    // rsp_demux:sink_ready -> router_001:src_ready
	wire   [0:0] router_001_src_channel;                                                                  // router_001:src_channel -> rsp_demux:sink_channel
	wire         router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> rsp_demux:sink_startofpacket
	wire         router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> async_fifo:in_valid
	wire  [78:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> async_fifo:in_data
	wire         cmd_demux_src0_ready;                                                                    // async_fifo:in_ready -> cmd_demux:src0_ready
	wire   [0:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> async_fifo:in_channel
	wire         cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> async_fifo:in_startofpacket
	wire         cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> async_fifo:in_endofpacket
	wire         rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> async_fifo_001:in_valid
	wire  [78:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> async_fifo_001:in_data
	wire         rsp_demux_src0_ready;                                                                    // async_fifo_001:in_ready -> rsp_demux:src0_ready
	wire   [0:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> async_fifo_001:in_channel
	wire         rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> async_fifo_001:in_startofpacket
	wire         rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> async_fifo_001:in_endofpacket
	wire         cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> agent_pipeline:in_valid
	wire  [78:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> agent_pipeline:in_data
	wire         cmd_mux_src_ready;                                                                       // agent_pipeline:in_ready -> cmd_mux:src_ready
	wire   [0:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> agent_pipeline:in_channel
	wire         cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> agent_pipeline:in_startofpacket
	wire         cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> agent_pipeline:in_endofpacket
	wire         agent_pipeline_source0_valid;                                                            // agent_pipeline:out_valid -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:cp_valid
	wire  [78:0] agent_pipeline_source0_data;                                                             // agent_pipeline:out_data -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:cp_data
	wire         agent_pipeline_source0_ready;                                                            // alt_xcvr_reconfig_0_reconfig_mgmt_agent:cp_ready -> agent_pipeline:out_ready
	wire   [0:0] agent_pipeline_source0_channel;                                                          // agent_pipeline:out_channel -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:cp_channel
	wire         agent_pipeline_source0_startofpacket;                                                    // agent_pipeline:out_startofpacket -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:cp_startofpacket
	wire         agent_pipeline_source0_endofpacket;                                                      // agent_pipeline:out_endofpacket -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:cp_endofpacket
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_valid;                                        // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rp_valid -> agent_pipeline_001:in_valid
	wire  [78:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_data;                                         // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rp_data -> agent_pipeline_001:in_data
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_ready;                                        // agent_pipeline_001:in_ready -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rp_ready
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_startofpacket;                                // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rp_startofpacket -> agent_pipeline_001:in_startofpacket
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_endofpacket;                                  // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rp_endofpacket -> agent_pipeline_001:in_endofpacket
	wire         agent_pipeline_001_source0_valid;                                                        // agent_pipeline_001:out_valid -> router_001:sink_valid
	wire  [78:0] agent_pipeline_001_source0_data;                                                         // agent_pipeline_001:out_data -> router_001:sink_data
	wire         agent_pipeline_001_source0_ready;                                                        // router_001:sink_ready -> agent_pipeline_001:out_ready
	wire         agent_pipeline_001_source0_startofpacket;                                                // agent_pipeline_001:out_startofpacket -> router_001:sink_startofpacket
	wire         agent_pipeline_001_source0_endofpacket;                                                  // agent_pipeline_001:out_endofpacket -> router_001:sink_endofpacket
	wire         async_fifo_out_valid;                                                                    // async_fifo:out_valid -> mux_pipeline:in_valid
	wire  [78:0] async_fifo_out_data;                                                                     // async_fifo:out_data -> mux_pipeline:in_data
	wire         async_fifo_out_ready;                                                                    // mux_pipeline:in_ready -> async_fifo:out_ready
	wire   [0:0] async_fifo_out_channel;                                                                  // async_fifo:out_channel -> mux_pipeline:in_channel
	wire         async_fifo_out_startofpacket;                                                            // async_fifo:out_startofpacket -> mux_pipeline:in_startofpacket
	wire         async_fifo_out_endofpacket;                                                              // async_fifo:out_endofpacket -> mux_pipeline:in_endofpacket
	wire         mux_pipeline_source0_valid;                                                              // mux_pipeline:out_valid -> cmd_mux:sink0_valid
	wire  [78:0] mux_pipeline_source0_data;                                                               // mux_pipeline:out_data -> cmd_mux:sink0_data
	wire         mux_pipeline_source0_ready;                                                              // cmd_mux:sink0_ready -> mux_pipeline:out_ready
	wire   [0:0] mux_pipeline_source0_channel;                                                            // mux_pipeline:out_channel -> cmd_mux:sink0_channel
	wire         mux_pipeline_source0_startofpacket;                                                      // mux_pipeline:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire         mux_pipeline_source0_endofpacket;                                                        // mux_pipeline:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire         async_fifo_001_out_valid;                                                                // async_fifo_001:out_valid -> mux_pipeline_001:in_valid
	wire  [78:0] async_fifo_001_out_data;                                                                 // async_fifo_001:out_data -> mux_pipeline_001:in_data
	wire         async_fifo_001_out_ready;                                                                // mux_pipeline_001:in_ready -> async_fifo_001:out_ready
	wire   [0:0] async_fifo_001_out_channel;                                                              // async_fifo_001:out_channel -> mux_pipeline_001:in_channel
	wire         async_fifo_001_out_startofpacket;                                                        // async_fifo_001:out_startofpacket -> mux_pipeline_001:in_startofpacket
	wire         async_fifo_001_out_endofpacket;                                                          // async_fifo_001:out_endofpacket -> mux_pipeline_001:in_endofpacket
	wire         mux_pipeline_001_source0_valid;                                                          // mux_pipeline_001:out_valid -> rsp_mux:sink0_valid
	wire  [78:0] mux_pipeline_001_source0_data;                                                           // mux_pipeline_001:out_data -> rsp_mux:sink0_data
	wire         mux_pipeline_001_source0_ready;                                                          // rsp_mux:sink0_ready -> mux_pipeline_001:out_ready
	wire   [0:0] mux_pipeline_001_source0_channel;                                                        // mux_pipeline_001:out_channel -> rsp_mux:sink0_channel
	wire         mux_pipeline_001_source0_startofpacket;                                                  // mux_pipeline_001:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire         mux_pipeline_001_source0_endofpacket;                                                    // mux_pipeline_001:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_valid;                            // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo:out_valid -> avalon_st_adapter:in_0_valid
	wire  [33:0] alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_data;                             // alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo:out_data -> avalon_st_adapter:in_0_data
	wire         alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_ready;                            // avalon_st_adapter:in_0_ready -> alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo:out_ready
	wire         avalon_st_adapter_out_0_valid;                                                           // avalon_st_adapter:out_0_valid -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rdata_fifo_sink_valid
	wire  [33:0] avalon_st_adapter_out_0_data;                                                            // avalon_st_adapter:out_0_data -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rdata_fifo_sink_data
	wire         avalon_st_adapter_out_0_ready;                                                           // alt_xcvr_reconfig_0_reconfig_mgmt_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire   [0:0] avalon_st_adapter_out_0_error;                                                           // avalon_st_adapter:out_0_error -> alt_xcvr_reconfig_0_reconfig_mgmt_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (7),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (9),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (0),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) pcie_reconfig_driver_0_reconfig_mgmt_translator (
		.clk                    (pcie_256_dma_coreclkout_clk),                                                             //                       clk.clk
		.reset                  (pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (pcie_reconfig_driver_0_reconfig_mgmt_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (pcie_reconfig_driver_0_reconfig_mgmt_waitrequest),                                        //                          .waitrequest
		.av_read                (pcie_reconfig_driver_0_reconfig_mgmt_read),                                               //                          .read
		.av_readdata            (pcie_reconfig_driver_0_reconfig_mgmt_readdata),                                           //                          .readdata
		.av_write               (pcie_reconfig_driver_0_reconfig_mgmt_write),                                              //                          .write
		.av_writedata           (pcie_reconfig_driver_0_reconfig_mgmt_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                    //               (terminated)
		.av_byteenable          (4'b1111),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                        //               (terminated)
		.av_lock                (1'b0),                                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                                    //               (terminated)
		.uav_clken              (),                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                   //               (terminated)
		.av_response            (),                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                         //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (7),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (9),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) alt_xcvr_reconfig_0_reconfig_mgmt_translator (
		.clk                    (clk_0_clk_clk),                                                  //                      clk.clk
		.reset                  (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_read),                //                         .read
		.uav_write              (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_write),               //                         .write
		.uav_waitrequest        (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_writedata),           //                         .writedata
		.uav_lock               (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (alt_xcvr_reconfig_0_reconfig_mgmt_address),                      //      avalon_anti_slave_0.address
		.av_write               (alt_xcvr_reconfig_0_reconfig_mgmt_write),                        //                         .write
		.av_read                (alt_xcvr_reconfig_0_reconfig_mgmt_read),                         //                         .read
		.av_readdata            (alt_xcvr_reconfig_0_reconfig_mgmt_readdata),                     //                         .readdata
		.av_writedata           (alt_xcvr_reconfig_0_reconfig_mgmt_writedata),                    //                         .writedata
		.av_waitrequest         (alt_xcvr_reconfig_0_reconfig_mgmt_waitrequest),                  //                         .waitrequest
		.av_begintransfer       (),                                                               //              (terminated)
		.av_beginbursttransfer  (),                                                               //              (terminated)
		.av_burstcount          (),                                                               //              (terminated)
		.av_byteenable          (),                                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                                           //              (terminated)
		.av_writebyteenable     (),                                                               //              (terminated)
		.av_lock                (),                                                               //              (terminated)
		.av_chipselect          (),                                                               //              (terminated)
		.av_clken               (),                                                               //              (terminated)
		.uav_clken              (1'b0),                                                           //              (terminated)
		.av_debugaccess         (),                                                               //              (terminated)
		.av_outputenable        (),                                                               //              (terminated)
		.uav_response           (),                                                               //              (terminated)
		.av_response            (2'b00),                                                          //              (terminated)
		.uav_writeresponsevalid (),                                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_CACHE_H               (73),
		.PKT_CACHE_L               (70),
		.PKT_THREAD_ID_H           (66),
		.PKT_THREAD_ID_L           (66),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_EXCLUSIVE       (50),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (65),
		.ST_DATA_W                 (79),
		.ST_CHANNEL_W              (1),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (1),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pcie_reconfig_driver_0_reconfig_mgmt_agent (
		.clk                   (pcie_256_dma_coreclkout_clk),                                                             //       clk.clk
		.reset                 (pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (pcie_reconfig_driver_0_reconfig_mgmt_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_valid),                                     //        cp.valid
		.cp_data               (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_data),                                      //          .data
		.cp_startofpacket      (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                       //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                        //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                     //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                                 //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                       //          .ready
		.av_response           (),                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (78),
		.PKT_ORI_BURST_SIZE_L      (76),
		.PKT_RESPONSE_STATUS_H     (75),
		.PKT_RESPONSE_STATUS_L     (74),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (49),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (69),
		.PKT_PROTECTION_L          (67),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (54),
		.PKT_BYTE_CNT_H            (53),
		.PKT_BYTE_CNT_L            (51),
		.PKT_ADDR_H                (44),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (45),
		.PKT_TRANS_POSTED          (46),
		.PKT_TRANS_WRITE           (47),
		.PKT_TRANS_READ            (48),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (64),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (65),
		.PKT_DEST_ID_L             (65),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (1),
		.ST_DATA_W                 (79),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) alt_xcvr_reconfig_0_reconfig_mgmt_agent (
		.clk                     (clk_0_clk_clk),                                                      //             clk.clk
		.reset                   (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_address),                 //              m0.address
		.m0_burstcount           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_lock),                    //                .lock
		.m0_readdata             (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_read),                    //                .read
		.m0_waitrequest          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_writedata),               //                .writedata
		.m0_write                (alt_xcvr_reconfig_0_reconfig_mgmt_agent_m0_write),                   //                .write
		.rp_endofpacket          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_ready),                   //                .ready
		.rp_valid                (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_valid),                   //                .valid
		.rp_data                 (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_data),                    //                .data
		.rp_startofpacket        (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (agent_pipeline_source0_ready),                                       //              cp.ready
		.cp_valid                (agent_pipeline_source0_valid),                                       //                .valid
		.cp_data                 (agent_pipeline_source0_data),                                        //                .data
		.cp_startofpacket        (agent_pipeline_source0_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (agent_pipeline_source0_endofpacket),                                 //                .endofpacket
		.cp_channel              (agent_pipeline_source0_channel),                                     //                .channel
		.rf_sink_ready           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                      //                .error
		.rdata_fifo_src_ready    (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (80),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                      //       clk.clk
		.reset             (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_data),             //        in.data
		.in_valid          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_valid),            //          .valid
		.in_ready          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (34),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_data),    //        in.data
		.in_valid          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_valid),   //          .valid
		.in_ready          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_src_ready),   //          .ready
		.out_data          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_data),    //       out.data
		.out_valid         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_valid),   //          .valid
		.out_ready         (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_ready),   //          .ready
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_startofpacket  (1'b0),                                                           // (terminated)
		.in_endofpacket    (1'b0),                                                           // (terminated)
		.out_startofpacket (),                                                               // (terminated)
		.out_endofpacket   (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	top_mm_interconnect_5_router router (
		.sink_ready         (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_ready),                  //      sink.ready
		.sink_valid         (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_valid),                  //          .valid
		.sink_data          (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_data),                   //          .data
		.sink_startofpacket (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pcie_reconfig_driver_0_reconfig_mgmt_agent_cp_endofpacket),            //          .endofpacket
		.clk                (pcie_256_dma_coreclkout_clk),                                          //       clk.clk
		.reset              (pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                                     //       src.ready
		.src_valid          (router_src_valid),                                                     //          .valid
		.src_data           (router_src_data),                                                      //          .data
		.src_channel        (router_src_channel),                                                   //          .channel
		.src_startofpacket  (router_src_startofpacket),                                             //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                                //          .endofpacket
	);

	top_mm_interconnect_5_router_001 router_001 (
		.sink_ready         (agent_pipeline_001_source0_ready),                               //      sink.ready
		.sink_valid         (agent_pipeline_001_source0_valid),                               //          .valid
		.sink_data          (agent_pipeline_001_source0_data),                                //          .data
		.sink_startofpacket (agent_pipeline_001_source0_startofpacket),                       //          .startofpacket
		.sink_endofpacket   (agent_pipeline_001_source0_endofpacket),                         //          .endofpacket
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                           //       src.ready
		.src_valid          (router_001_src_valid),                                           //          .valid
		.src_data           (router_001_src_data),                                            //          .data
		.src_channel        (router_001_src_channel),                                         //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                                   //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                      //          .endofpacket
	);

	top_mm_interconnect_5_cmd_demux cmd_demux (
		.clk                (pcie_256_dma_coreclkout_clk),                                          //       clk.clk
		.reset              (pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                                     //      sink.ready
		.sink_channel       (router_src_channel),                                                   //          .channel
		.sink_data          (router_src_data),                                                      //          .data
		.sink_startofpacket (router_src_startofpacket),                                             //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                               //          .endofpacket
		.sink_valid         (router_src_valid),                                                     //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                                 //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                                 //          .valid
		.src0_data          (cmd_demux_src0_data),                                                  //          .data
		.src0_channel       (cmd_demux_src0_channel),                                               //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                                         //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                            //          .endofpacket
	);

	top_mm_interconnect_5_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                  //       clk.clk
		.reset               (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                              //       src.ready
		.src_valid           (cmd_mux_src_valid),                                              //          .valid
		.src_data            (cmd_mux_src_data),                                               //          .data
		.src_channel         (cmd_mux_src_channel),                                            //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.sink0_ready         (mux_pipeline_source0_ready),                                     //     sink0.ready
		.sink0_valid         (mux_pipeline_source0_valid),                                     //          .valid
		.sink0_channel       (mux_pipeline_source0_channel),                                   //          .channel
		.sink0_data          (mux_pipeline_source0_data),                                      //          .data
		.sink0_startofpacket (mux_pipeline_source0_startofpacket),                             //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_source0_endofpacket)                                //          .endofpacket
	);

	top_mm_interconnect_5_rsp_demux rsp_demux (
		.clk                (clk_0_clk_clk),                                                  //       clk.clk
		.reset              (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                           //      sink.ready
		.sink_channel       (router_001_src_channel),                                         //          .channel
		.sink_data          (router_001_src_data),                                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                           //          .valid
		.src0_data          (rsp_demux_src0_data),                                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                                      //          .endofpacket
	);

	top_mm_interconnect_5_rsp_mux rsp_mux (
		.clk                 (pcie_256_dma_coreclkout_clk),                                          //       clk.clk
		.reset               (pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                                    //       src.ready
		.src_valid           (rsp_mux_src_valid),                                                    //          .valid
		.src_data            (rsp_mux_src_data),                                                     //          .data
		.src_channel         (rsp_mux_src_channel),                                                  //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                            //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                              //          .endofpacket
		.sink0_ready         (mux_pipeline_001_source0_ready),                                       //     sink0.ready
		.sink0_valid         (mux_pipeline_001_source0_valid),                                       //          .valid
		.sink0_channel       (mux_pipeline_001_source0_channel),                                     //          .channel
		.sink0_data          (mux_pipeline_001_source0_data),                                        //          .data
		.sink0_startofpacket (mux_pipeline_001_source0_startofpacket),                               //          .startofpacket
		.sink0_endofpacket   (mux_pipeline_001_source0_endofpacket)                                  //          .endofpacket
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (79),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (1),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo (
		.in_clk            (pcie_256_dma_coreclkout_clk),                                           //        in_clk.clk
		.in_reset_n        (~pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset), //  in_clk_reset.reset_n
		.out_clk           (clk_0_clk_clk),                                                         //       out_clk.clk
		.out_reset_n       (~alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset),       // out_clk_reset.reset_n
		.in_data           (cmd_demux_src0_data),                                                   //            in.data
		.in_valid          (cmd_demux_src0_valid),                                                  //              .valid
		.in_ready          (cmd_demux_src0_ready),                                                  //              .ready
		.in_startofpacket  (cmd_demux_src0_startofpacket),                                          //              .startofpacket
		.in_endofpacket    (cmd_demux_src0_endofpacket),                                            //              .endofpacket
		.in_channel        (cmd_demux_src0_channel),                                                //              .channel
		.out_data          (async_fifo_out_data),                                                   //           out.data
		.out_valid         (async_fifo_out_valid),                                                  //              .valid
		.out_ready         (async_fifo_out_ready),                                                  //              .ready
		.out_startofpacket (async_fifo_out_startofpacket),                                          //              .startofpacket
		.out_endofpacket   (async_fifo_out_endofpacket),                                            //              .endofpacket
		.out_channel       (async_fifo_out_channel),                                                //              .channel
		.in_csr_address    (1'b0),                                                                  //   (terminated)
		.in_csr_read       (1'b0),                                                                  //   (terminated)
		.in_csr_write      (1'b0),                                                                  //   (terminated)
		.in_csr_readdata   (),                                                                      //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                                  //   (terminated)
		.out_csr_address   (1'b0),                                                                  //   (terminated)
		.out_csr_read      (1'b0),                                                                  //   (terminated)
		.out_csr_write     (1'b0),                                                                  //   (terminated)
		.out_csr_readdata  (),                                                                      //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                                  //   (terminated)
		.in_empty          (1'b0),                                                                  //   (terminated)
		.out_empty         (),                                                                      //   (terminated)
		.in_error          (1'b0),                                                                  //   (terminated)
		.out_error         (),                                                                      //   (terminated)
		.space_avail_data  ()                                                                       //   (terminated)
	);

	altera_avalon_dc_fifo #(
		.SYMBOLS_PER_BEAT   (1),
		.BITS_PER_SYMBOL    (79),
		.FIFO_DEPTH         (8),
		.CHANNEL_WIDTH      (1),
		.ERROR_WIDTH        (0),
		.USE_PACKETS        (1),
		.USE_IN_FILL_LEVEL  (0),
		.USE_OUT_FILL_LEVEL (0),
		.WR_SYNC_DEPTH      (3),
		.RD_SYNC_DEPTH      (3)
	) async_fifo_001 (
		.in_clk            (clk_0_clk_clk),                                                         //        in_clk.clk
		.in_reset_n        (~alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset),       //  in_clk_reset.reset_n
		.out_clk           (pcie_256_dma_coreclkout_clk),                                           //       out_clk.clk
		.out_reset_n       (~pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset), // out_clk_reset.reset_n
		.in_data           (rsp_demux_src0_data),                                                   //            in.data
		.in_valid          (rsp_demux_src0_valid),                                                  //              .valid
		.in_ready          (rsp_demux_src0_ready),                                                  //              .ready
		.in_startofpacket  (rsp_demux_src0_startofpacket),                                          //              .startofpacket
		.in_endofpacket    (rsp_demux_src0_endofpacket),                                            //              .endofpacket
		.in_channel        (rsp_demux_src0_channel),                                                //              .channel
		.out_data          (async_fifo_001_out_data),                                               //           out.data
		.out_valid         (async_fifo_001_out_valid),                                              //              .valid
		.out_ready         (async_fifo_001_out_ready),                                              //              .ready
		.out_startofpacket (async_fifo_001_out_startofpacket),                                      //              .startofpacket
		.out_endofpacket   (async_fifo_001_out_endofpacket),                                        //              .endofpacket
		.out_channel       (async_fifo_001_out_channel),                                            //              .channel
		.in_csr_address    (1'b0),                                                                  //   (terminated)
		.in_csr_read       (1'b0),                                                                  //   (terminated)
		.in_csr_write      (1'b0),                                                                  //   (terminated)
		.in_csr_readdata   (),                                                                      //   (terminated)
		.in_csr_writedata  (32'b00000000000000000000000000000000),                                  //   (terminated)
		.out_csr_address   (1'b0),                                                                  //   (terminated)
		.out_csr_read      (1'b0),                                                                  //   (terminated)
		.out_csr_write     (1'b0),                                                                  //   (terminated)
		.out_csr_readdata  (),                                                                      //   (terminated)
		.out_csr_writedata (32'b00000000000000000000000000000000),                                  //   (terminated)
		.in_empty          (1'b0),                                                                  //   (terminated)
		.out_empty         (),                                                                      //   (terminated)
		.in_error          (1'b0),                                                                  //   (terminated)
		.out_error         (),                                                                      //   (terminated)
		.space_avail_data  ()                                                                       //   (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (79),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline (
		.clk               (clk_0_clk_clk),                                                  //       cr0.clk
		.reset             (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (cmd_mux_src_ready),                                              //     sink0.ready
		.in_valid          (cmd_mux_src_valid),                                              //          .valid
		.in_startofpacket  (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.in_endofpacket    (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.in_data           (cmd_mux_src_data),                                               //          .data
		.in_channel        (cmd_mux_src_channel),                                            //          .channel
		.out_ready         (agent_pipeline_source0_ready),                                   //   source0.ready
		.out_valid         (agent_pipeline_source0_valid),                                   //          .valid
		.out_startofpacket (agent_pipeline_source0_startofpacket),                           //          .startofpacket
		.out_endofpacket   (agent_pipeline_source0_endofpacket),                             //          .endofpacket
		.out_data          (agent_pipeline_source0_data),                                    //          .data
		.out_channel       (agent_pipeline_source0_channel),                                 //          .channel
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (79),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (0),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) agent_pipeline_001 (
		.clk               (clk_0_clk_clk),                                                  //       cr0.clk
		.reset             (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_ready),               //     sink0.ready
		.in_valid          (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_valid),               //          .valid
		.in_startofpacket  (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_startofpacket),       //          .startofpacket
		.in_endofpacket    (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_endofpacket),         //          .endofpacket
		.in_data           (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rp_data),                //          .data
		.out_ready         (agent_pipeline_001_source0_ready),                               //   source0.ready
		.out_valid         (agent_pipeline_001_source0_valid),                               //          .valid
		.out_startofpacket (agent_pipeline_001_source0_startofpacket),                       //          .startofpacket
		.out_endofpacket   (agent_pipeline_001_source0_endofpacket),                         //          .endofpacket
		.out_data          (agent_pipeline_001_source0_data),                                //          .data
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_channel       (),                                                               // (terminated)
		.in_channel        (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (79),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline (
		.clk               (clk_0_clk_clk),                                                  //       cr0.clk
		.reset             (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (async_fifo_out_ready),                                           //     sink0.ready
		.in_valid          (async_fifo_out_valid),                                           //          .valid
		.in_startofpacket  (async_fifo_out_startofpacket),                                   //          .startofpacket
		.in_endofpacket    (async_fifo_out_endofpacket),                                     //          .endofpacket
		.in_data           (async_fifo_out_data),                                            //          .data
		.in_channel        (async_fifo_out_channel),                                         //          .channel
		.out_ready         (mux_pipeline_source0_ready),                                     //   source0.ready
		.out_valid         (mux_pipeline_source0_valid),                                     //          .valid
		.out_startofpacket (mux_pipeline_source0_startofpacket),                             //          .startofpacket
		.out_endofpacket   (mux_pipeline_source0_endofpacket),                               //          .endofpacket
		.out_data          (mux_pipeline_source0_data),                                      //          .data
		.out_channel       (mux_pipeline_source0_channel),                                   //          .channel
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_error          (1'b0)                                                            // (terminated)
	);

	altera_avalon_st_pipeline_stage #(
		.SYMBOLS_PER_BEAT (1),
		.BITS_PER_SYMBOL  (79),
		.USE_PACKETS      (1),
		.USE_EMPTY        (0),
		.EMPTY_WIDTH      (0),
		.CHANNEL_WIDTH    (1),
		.PACKET_WIDTH     (2),
		.ERROR_WIDTH      (0),
		.PIPELINE_READY   (1)
	) mux_pipeline_001 (
		.clk               (pcie_256_dma_coreclkout_clk),                                          //       cr0.clk
		.reset             (pcie_reconfig_driver_0_reconfig_xcvr_rst_reset_bridge_in_reset_reset), // cr0_reset.reset
		.in_ready          (async_fifo_001_out_ready),                                             //     sink0.ready
		.in_valid          (async_fifo_001_out_valid),                                             //          .valid
		.in_startofpacket  (async_fifo_001_out_startofpacket),                                     //          .startofpacket
		.in_endofpacket    (async_fifo_001_out_endofpacket),                                       //          .endofpacket
		.in_data           (async_fifo_001_out_data),                                              //          .data
		.in_channel        (async_fifo_001_out_channel),                                           //          .channel
		.out_ready         (mux_pipeline_001_source0_ready),                                       //   source0.ready
		.out_valid         (mux_pipeline_001_source0_valid),                                       //          .valid
		.out_startofpacket (mux_pipeline_001_source0_startofpacket),                               //          .startofpacket
		.out_endofpacket   (mux_pipeline_001_source0_endofpacket),                                 //          .endofpacket
		.out_data          (mux_pipeline_001_source0_data),                                        //          .data
		.out_channel       (mux_pipeline_001_source0_channel),                                     //          .channel
		.in_empty          (1'b0),                                                                 // (terminated)
		.out_empty         (),                                                                     // (terminated)
		.out_error         (),                                                                     // (terminated)
		.in_error          (1'b0)                                                                  // (terminated)
	);

	top_mm_interconnect_1_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                                  // in_clk_0.clk
		.in_rst_0_reset (alt_xcvr_reconfig_0_mgmt_rst_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_data),    //     in_0.data
		.in_0_valid     (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_valid),   //         .valid
		.in_0_ready     (alt_xcvr_reconfig_0_reconfig_mgmt_agent_rdata_fifo_out_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                   //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                                  //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                                  //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                   //         .error
	);

endmodule
